// Copyright (c) 2025 RainyRoot
// MIT License
package cmd

import (
	"fmt"
	"os/user"
	"strings"
	"time"
)

// Define all Windows-related actions
var winActions = []WinAction{
	{&systemFlag, "system", getSystemInfo},
	{&ipconfigFlag, "ipconfig", getIpConfigInfo},
	{&netuseFlag, "netuse", getNetInfo},
	{&productsFlag, "products", getProductsInfo},
	{&getVpnConnectionsFlag, "vpn", getVpnConnections},
	{&getServicesFlag, "services", getServices},
	{&getUserInfoFlag, "users", getUsersInfo},
	{&getUsbInfoFlag, "usb", getUsbInfo},
	{&checkHealthFlag, "check-health", checkHealth},

	//---additional flags defined in init():---
	// traceRoute -> trace <ip/host>
	// remoteTarget -> remote <host>
	// reportFormat  -> report <html|md>
	// autocomplete -> --win <tab>

	//Cases requiring confirmation:
	// confirmationFlag -> ----yes to confirm prompts like flushing DNS and winget update
	// flushDns -> --yes
	// wingetUpdate -> --yes
	// restoreHealth -> --yes
	// scanHealth -> --yes
}

// ========================
// All-in-one Collector
// ========================

func getAllWindowsInfo() {
	fmt.Println("=== Collecting All Windows Info ===")
	var report strings.Builder

	// Report Header current User
	usr, err := user.Current()
	username := "Unknown"
	if err == nil {
		username = usr.Username
	}
	report.WriteString(fmt.Sprintf("Report generated by: %s\nDate: %s\n\n", username, time.Now().Format("2006-01-02 15:04:05")))

	for _, a := range winActions {
		fmt.Printf("\n=== %s ===\n", strings.Title(a.name))
		out, _ := a.run()
		fmt.Println(out)
		report.WriteString(fmt.Sprintf("=== %s ===\n%s\n\n", strings.Title(a.name), out))
	}

	// Tracing example
	examples := []string{"srv-fls-001.ad.adler-group.com", "8.8.8.8"}
	for _, host := range examples {
		fmt.Printf("\n=== TraceRoute (%s) ===\n", host)
		out, _ := traceRoute(host)
		fmt.Println(out)
		report.WriteString(fmt.Sprintf("=== TraceRoute (%s) ===\n%s\n\n", host, out))
	}

	// Export report
	finalReport := report.String()
	copyToClipboard(finalReport)
	if err := exportReport(finalReport, "html", ""); err != nil {
		fmt.Println("Error exporting report:", err)
	} else {
		fmt.Printf("âœ… Report exported successfully as %s\n", "html")
	}
}
